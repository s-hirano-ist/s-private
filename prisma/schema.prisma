// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Auth
enum Role {
  ADMIN
  EDITOR
  VIEWER
}

model Users {
  id           String           @id @default(uuid(7))
  email        String           @unique
  password     String
  verified     Boolean          @default(false)
  role         Role             @default(VIEWER)
  loginHistory LoginHistories[]
  profile      Profiles?
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")
  categories   Categories[]
  news         News[]
  contents     Contents[]

  @@map("users")
}

model Profiles {
  id        String   @id @default(uuid(7))
  name      String?
  bio       String?
  avatarUrl String?  @map("avatar_url")
  users     Users    @relation(fields: [userId], references: [id])
  userId    String   @unique @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("profiles")
}

model LoginHistories {
  id        String   @id @default(uuid(7))
  users     Users    @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("login_histories")
}

// Dump

enum Status {
  UNEXPORTED
  UPDATED_RECENTLY
  EXPORTED
}

model Categories {
  id        Int      @id @default(autoincrement())
  name      String
  news      News[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  users     Users    @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")

  @@unique([name, userId])
  @@map("categories")
}

model News {
  id         Int        @id @default(autoincrement())
  title      String
  url        String
  quote      String?
  status     Status     @default(UNEXPORTED)
  category   Categories @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId Int        @map("category_id")
  users      Users      @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  @@map("news")
}

model Contents {
  id        Int      @id @default(autoincrement())
  title     String
  url       String
  quote     String?
  status    Status   @default(UNEXPORTED)
  users     Users    @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("contents")
}
