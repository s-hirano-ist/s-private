generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL") // uses connection pooling
  directUrl = env("POSTGRES_DIRECT_URL") // uses a direct connection
}

// Auth

enum Role {
  ADMIN // DUMPER権限有・VIEWER権限有
  VIEWER // DUMPER権限有・VIEWER権限無
  UNAUTHORIZED // auth以外の全ページ閲覧不可
}

model Users {
  id       String @id @default(uuid(7))
  username String @unique
  password String
  role     Role   @default(UNAUTHORIZED)

  failedLoginAttempts Int     @default(0) @map("failed_login_attempts")
  isLocked            Boolean @default(false) @map("is_locked")

  LoginHistory LoginHistories[]
  Profile      Profiles?
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")
  Categories   Categories[]
  News         News[]
  Contents     Contents[]
  Images       Images[]

  @@map("users")
}

model Profiles {
  id        String   @id @default(uuid(7))
  name      String
  bio       String?
  avatarUrl String?  @map("avatar_url")
  Users     Users    @relation(fields: [userId], references: [id])
  userId    String   @unique @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("profiles")
}

model LoginHistories {
  id        String   @id @default(uuid(7))
  Users     Users    @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("login_histories")
}

// Dumper

enum Status {
  UNEXPORTED
  UPDATED_RECENTLY
  EXPORTED
}

model Categories {
  id        Int      @id @default(autoincrement())
  name      String
  News      News[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Users     Users    @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")

  @@unique([name, userId])
  @@map("categories")
}

model News {
  id         Int        @id @default(autoincrement())
  title      String
  url        String
  quote      String?
  status     Status     @default(UNEXPORTED)
  Category   Categories @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId Int        @map("category_id")
  Users      Users      @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  @@map("news")
}

model Contents {
  id        Int      @id @default(autoincrement())
  title     String
  url       String
  quote     String?
  status    Status   @default(UNEXPORTED)
  Users     Users    @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("contents")
}

model Images {
  id        String   @id @default(uuid(7))
  status    Status   @default(UNEXPORTED)
  Users     Users    @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("images")
}

// Viewer

model StaticContents {
  title     String   @id @unique
  data      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("st_contents")
}

model StaticBooks {
  title     String   @id @unique
  data      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("st_books")
}
